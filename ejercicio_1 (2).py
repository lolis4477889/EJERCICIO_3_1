# -*- coding: utf-8 -*-
"""EJERCICIO_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NqS6xxh0FFrimd1B_y_A82Nn18_yHDxM
"""

import numpy as np

def gauss_elimination(A, b):
    n = len(b)

    # Eliminación Gaussiana con pivoteo parcial
    for i in range(n):
        # Encontrar el pivote
        max_row = i + np.argmax(np.abs(A[i:, i]))

        # Intercambiar filas si es necesario
        if max_row != i:
            A[[i, max_row]] = A[[max_row, i]]
            b[[i, max_row]] = b[[max_row, i]]

        # Eliminación hacia adelante
        for j in range(i + 1, n):
            factor = A[j][i] / A[i][i]
            A[j, i:] -= factor * A[i, i:]
            b[j] -= factor * b[i]

    # Sustitución regresiva
    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]

    return x

# Definir el sistema de ecuaciones
A = np.array([
    [3, 2, -1, 4],
    [5, -3, 2, -1],
    [-1, 4, -2, 3],
    [2, -1, 3, 5]
], dtype=float)

b = np.array([10, 5, -3, 8], dtype=float)

# Resolver el sistema
sol = gauss_elimination(A, b)

# Mostrar la solución en forma de tabla mejorada
print("\nSolución del sistema de ecuaciones:")
print("====================================")
print("| Variable |   Valor   |")
print("|----------|-----------|")
for i, valor in enumerate(sol):
    print(f"|   x{i+1}    |  {valor:8.4f}  |")
print("====================================")