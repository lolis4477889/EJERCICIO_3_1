import numpy as np

def gauss_elimination(A, b):
    n = len(b)
    
    # Aplicamos el método de eliminación de Gauss con pivoteo parcial
    for i in range(n):
        # Encontramos la fila con el mayor valor absoluto en la columna actual para usarlo como pivote
        max_row = i + np.argmax(np.abs(A[i:, i]))
        
        # Intercambiamos filas si es necesario para mejorar la estabilidad numérica
        if max_row != i:
            A[[i, max_row]] = A[[max_row, i]]
            b[[i, max_row]] = b[[max_row, i]]
        
        # Eliminación hacia adelante para convertir la matriz en forma triangular superior
        for j in range(i+1, n):
            factor = A[j][i] / A[i][i]  # Calculamos el factor de eliminación
            A[j, i:] -= factor * A[i, i:]  # Restamos el múltiplo adecuado de la fila pivote
            b[j] -= factor * b[i]  # Ajustamos el vector independiente
    
    # Sustitución regresiva para encontrar los valores de las incógnitas
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (b[i] - np.dot(A[i, i+1:], x[i+1:])) / A[i, i]  # Calculamos el valor de la incógnita
    
    return x  # Retornamos la solución del sistema

# Definimos la matriz de coeficientes y el vector independiente
A = np.array([
    [6, -2, 3, -1, 2],
    [-3, 5, -2, 4, -1],
    [4, 3, 7, -5, 3],
    [-2, 6, -3, 1, -4],
    [1, -3, 2, -5, 6]
], dtype=float)

b = np.array([15, -6, 20, -4, 7], dtype=float)

# Resolvemos el sistema de ecuaciones
sol = gauss_elimination(A, b)

# Mostramos la solución en una tabla con formato claro
print("\nSolución del sistema de ecuaciones:")
print("====================================")
print("| Variable |   Valor   |")
print("|----------|-----------|")
for i, valor in enumerate(sol):
    print(f"|   x{i+1}    |  {valor:8.4f}  |")
print("====================================")
